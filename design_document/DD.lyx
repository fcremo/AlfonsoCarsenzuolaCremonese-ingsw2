#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{listings}
\usepackage{xcolor}
\usepackage{pdflscape}
\usepackage{courier}
%\usepackage{mathtools}
\usepackage{graphicx}
\usepackage{booktabs}
\usepackage[T1]{fontenc}
\usepackage{lmodern}

\usepackage{listings}
\lstset{columns=fullflexible}

\usepackage{charter}

\usepackage{xspace}
%\usepackage{algorithmicx}
%\usepackage{algpseudocode}


% Definizione intestazioni e pie' di pagina
\usepackage{fancyhdr}

% _____________________________
\lstdefinelanguage{JS}{
keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break},
keywordstyle=\color{blue}\bfseries,
ndkeywords={class, export, boolean, throw, implements, import, this},   ndkeywordstyle=\color{darkgray}\bfseries,
identifierstyle=\color{black},
sensitive=false,   
comment=[l]{//},   
morecomment=[s]{/*}{*/},   
commentstyle=\color{purple}\ttfamily,   
stringstyle=\color{red}\ttfamily,   
morestring=[b]',   
morestring=[b]" 
}


\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
\lstset{frame=tb,  
language=JS,
aboveskip=3mm,   
belowskip=3mm,   
showstringspaces=false,   
columns=flexible,   
basicstyle={\small\ttfamily},   
numbers=none,   
numberstyle=\tiny\color{gray},   
keywordstyle=\color{blue},   
commentstyle=\color{dkgreen},   
stringstyle=\color{mauve},   
breaklines=true,   
breakatwhitespace=true,   
tabsize=3 }

% _____________________________

\usepackage[math]{cellspace}
    \cellspacetoplimit 4pt
    \cellspacebottomlimit 4pt
\end_preamble
\use_default_options true
\begin_modules
InStar
graphicboxes
fix-cm
fixltx2e
fixme
customHeadersFooters
pdfform
\end_modules
\maintain_unincluded_children false
\begin_forced_local_layout
Format 60
Style "In Preamble"
	Category "FrontMatter"
	Margin Static
	LatexType Paragraph
	InTitle 0
	InPreamble 1
	TocLevel -1000
	NeedProtect 0
	KeepEmpty 0
	NextNoIndent 0
	CommandDepth 0
	LatexName "dummy"
	ItemCommand item
	LabelType No_Label
	EndLabelType No_Label
	ParagraphGroup "0"
	ParIndent MM
	ParSkip 0.4
	ItemSep 0
	TopSep 0
	BottomSep 0
	LabelBottomSep 0
	ParSep 0
	NewLine 1
	Align Block
	AlignPossible Block, Center, Layout, Left, Right
	FreeSpacing 0
	PassThru 0
	ParbreakIsNewline 0
	RefPrefix OFF
	HTMLLabelFirst 0
	HTMLStyle
div.standard {
margin-bottom: 2ex;
}
	EndHTMLStyle
	HTMLForceCSS 0
	HTMLTitle 0
	Spellcheck 1
	ForceLocal 1
End
Style "In Title"
	Category "FrontMatter"
	Margin Static
	LatexType Paragraph
	InTitle 1
	InPreamble 0
	TocLevel -1000
	NeedProtect 0
	KeepEmpty 0
	NextNoIndent 0
	CommandDepth 0
	LatexName "dummy"
	ItemCommand item
	LabelType No_Label
	EndLabelType No_Label
	ParagraphGroup "0"
	ParIndent MM
	ParSkip 0.4
	ItemSep 0
	TopSep 0
	BottomSep 0
	LabelBottomSep 0
	ParSep 0
	NewLine 1
	Align Block
	AlignPossible Block, Center, Layout, Left, Right
	FreeSpacing 0
	PassThru 0
	ParbreakIsNewline 0
	RefPrefix OFF
	HTMLLabelFirst 0
	HTMLStyle
div.standard {
margin-bottom: 2ex;
}
	EndHTMLStyle
	HTMLForceCSS 0
	HTMLTitle 0
	Spellcheck 1
	ForceLocal 1
End
\end_forced_local_layout
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\rightmargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -1730310665 "fabcars"
\end_header

\begin_body

\begin_layout Standard
\begin_inset Preview

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{titlepage}
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
HRule}{
\backslash
rule{
\backslash
linewidth}{0.5mm}}
\end_layout

\begin_layout Plain Layout


\backslash
center
\end_layout

\begin_layout Plain Layout


\backslash
textsc{
\backslash
LARGE Politecnico di Milano}
\backslash

\backslash
[1.5cm] 
\end_layout

\begin_layout Plain Layout


\backslash
textsc{
\backslash
Large Travlendar+}
\backslash

\backslash
[0.5cm]
\end_layout

\begin_layout Plain Layout


\backslash
textsc{
\backslash
Large Life, simplified}
\backslash

\backslash
[0.5cm]
\end_layout

\begin_layout Plain Layout


\backslash
textsc{
\backslash
Large Software Engineering 2}
\backslash

\backslash
[0.5cm]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
HRule 
\backslash

\backslash
[0.4cm] { 
\backslash
huge 
\backslash
bfseries Design Document}
\backslash

\backslash
[0.4cm] 
\backslash
HRule 
\backslash

\backslash
[1.5cm]
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}{0.4
\backslash
textwidth} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{flushleft} 
\backslash
large 
\backslash
emph{Authors:}
\backslash

\backslash
 
\end_layout

\begin_layout Plain Layout

Alessandro 
\backslash
textsc{Alfonso} 
\backslash
newline 
\end_layout

\begin_layout Plain Layout

Fabrizio 
\backslash
textsc{Carsenzuola} 
\backslash
newline 
\end_layout

\begin_layout Plain Layout

Filippo 
\backslash
textsc{Cremonese} 
\end_layout

\begin_layout Plain Layout


\backslash
end{flushleft} 
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage} 
\end_layout

\begin_layout Plain Layout

~ 
\end_layout

\begin_layout Plain Layout


\backslash
begin{minipage}{0.4
\backslash
textwidth} 
\backslash
begin{flushright} 
\backslash
large 
\end_layout

\begin_layout Plain Layout


\backslash
emph{Supervisor:} 
\backslash

\backslash
 Elisabetta 
\backslash
textsc{De Nitto} 
\end_layout

\begin_layout Plain Layout


\backslash
end{flushright} 
\end_layout

\begin_layout Plain Layout


\backslash
end{minipage}
\backslash

\backslash
[3cm]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=0.3
\backslash
textwidth]{res/img/logopm}
\end_layout

\begin_layout Plain Layout


\backslash
vfill
\end_layout

\begin_layout Plain Layout


\backslash
pagenumbering{gobble}
\end_layout

\begin_layout Plain Layout

{
\backslash
large 
\backslash
today}
\backslash

\backslash
[3cm]
\end_layout

\begin_layout Plain Layout


\backslash
end{titlepage}
\end_layout

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\begin_layout Plain Layout


\backslash
mbox{} 
\backslash
thispagestyle{empty} 
\backslash
newpage
\end_layout

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\begin_layout Plain Layout


\backslash
tableofcontents{}
\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\begin_layout Plain Layout


\backslash
setcounter{page}{1}
\end_layout

\begin_layout Plain Layout


\backslash
pagenumbering{arabic}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Revision History
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="4">
<features tabularvalignment="middle" tabularwidth="100text%">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top" width="0pt">
<row topspace="2pt" bottomspace="2pt">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Version
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Authors
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Summary
\end_layout

\end_inset
</cell>
</row>
<row topspace="2pt" bottomspace="2pt">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Alessandro Alfonso, Fabrizio Carsenzuola, Filippo Cremonese
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Living document
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Purpose
\end_layout

\begin_layout Standard
This document describes the details of the proposed implementation of Travlendar
+.
 The requirements for the system were described in the Requirement Analysis
 and Specifications Document which should be read before reading this document.
 Here we document and explain design and implementation choices, first in
 overview and then in detail.
 The target audience of this document are the future developers of the system,
 as well as the project owner, prof.
 Di Nitto.
\end_layout

\begin_layout Subsection
Scope
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TBD (right now it's copy-pasted from the RASD)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Travlendar+ will be available on all the most used platforms (mobile and
 desktop).
 Other apps that partially cover Travlendar+ functionality already exist:
\end_layout

\begin_layout Itemize
calendar apps that provide weather information
\end_layout

\begin_layout Itemize
public transport assistants (e.g.
 Citymapper.
 See references 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:References"

\end_inset

)
\end_layout

\begin_layout Itemize
public transport ticketing apps
\end_layout

\begin_layout Itemize
navigation apps (e.g.
 Google Maps.
 See references 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:References"

\end_inset

)
\end_layout

\begin_layout Itemize
taxi apps (e.g.
 MyTaxi, Uber.
 See references 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:References"

\end_inset

)
\end_layout

\begin_layout Itemize
sharing mobility services applications (e.g.
 Enjoy, Mobike.
 See references 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:References"

\end_inset

)
\end_layout

\begin_layout Standard
Altough applications such as Citymapper or Google Maps already offer an
 excellent user experience, none of those apps allow to seamlessly schedule
 an appointment while keeping track of weather and travel times.
 Moreover, ticketing apps for public transportation are often poorly built,
 which increases the need for the in-app ticket purchase functionality in
 Travlendar+.
 The existing sharing mobility services don't offer the possibility to automatic
ally reserve the nearest vehicle at a certain date and time.
\end_layout

\begin_layout Standard
The system will need to interact with external entities and events beyond
 of our control (public transportation, sharing mobility services, weather)
 which can disrupt user experience.
 The specifications of the service are based upon the assumption that most
 of the time those external entities will behave as expected (documented
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Assumptions and dependencies"

\end_inset

).
 When one or some external services won't behave as expected, the application
 will work the same but in a dregradated state.
 If it is possible the system should notify the user that the application
 will work in a limited way (and tells him which services are unaviable).
 
\end_layout

\begin_layout Subsection
Definitions, acronyms, abbreviations
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TBD
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Reference documents
\end_layout

\begin_layout Itemize
RASD.pdf: Requirements Analysis and Specification Document
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Mandatory Project Assignments.pdf
\begin_inset Quotes erd
\end_inset

: Project assignments
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Logical components overview
\end_layout

\begin_layout Standard
Travlendar+ will consist of several logical components, following a traditional
 multi-tier architecture:
\end_layout

\begin_layout Itemize
Client UI
\end_layout

\begin_layout Itemize
Web tier
\end_layout

\begin_layout Itemize
Application logic tier
\end_layout

\begin_layout Itemize
Database tier
\end_layout

\begin_layout Itemize
External APIs and data sources
\end_layout

\begin_layout Subsubsection*
Client UI
\end_layout

\begin_layout Standard
End users will be able to use Travlendar on their mobile devices and desktop
 computers.
 We will develop applications compatible with smartphones and tablets running
 the two most common operating systems, iOS and Android.
 A desktop web application will be developed using the React framework,
 and the same code will be reused to build a standalone desktop application
 with support for push notifications and better OS integration by leveraging
 the Electron framework.
\end_layout

\begin_layout Subsubsection*
Web tier
\end_layout

\begin_layout Standard
The web application will fetch resources (HTML, CSS, JS, images, ...) from
 a web server, which will implement no application logic, forwarding API
 requests to the appropriate backend service instead.
 
\end_layout

\begin_layout Subsubsection*
Application logic tier
\end_layout

\begin_layout Standard
Server side functionality will be implemented by services reachable as HTTP
 REST APIs.
 Each service will implement some specific functionality (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Application-logic-tier"

\end_inset

 for more details on how the services will be split).
 Each service will depend only on the public APIs provided by other internal
 and external services, allowing for better reliability and availability.
 We will use Python and leverage the Flask framework.
\end_layout

\begin_layout Subsubsection*
Database
\end_layout

\begin_layout Standard
All the services will store and fetch data from a single logical relational
 database.
 We will use MariaDB as DBMS.
\end_layout

\begin_layout Subsubsection*
External APIs and data sources
\end_layout

\begin_layout Standard
Travlendar+ will rely on external services for:
\end_layout

\begin_layout Itemize
public transport information
\end_layout

\begin_layout Itemize
weather forecast
\end_layout

\begin_layout Itemize
map data
\end_layout

\begin_layout Itemize
traffic information
\end_layout

\begin_layout Itemize
find and reserve sharing mobility vehicles
\end_layout

\begin_layout Itemize
obtaining informations on public transportation tickets
\end_layout

\begin_layout Itemize
reserving taxis
\end_layout

\begin_layout Itemize
route planning
\end_layout

\begin_layout Itemize
notifications and emails
\end_layout

\begin_layout Itemize
processing payments
\end_layout

\begin_layout Subsection
Component view
\end_layout

\begin_layout Standard
Each logical component is made of several subcomponents.
\end_layout

\begin_layout Subsubsection
Client UI
\end_layout

\begin_layout Standard
End users will be able to use Travlendar+ on
\end_layout

\begin_layout Itemize
smartphones and tablets running Android 4.4+
\end_layout

\begin_layout Itemize
iPhone and iPad running iOS 10+
\end_layout

\begin_layout Itemize
laptops/desktops browsers (Chrome, Firefox, Safari and Edge)
\end_layout

\begin_layout Itemize
desktop (Linux, macOS and Windows)
\end_layout

\begin_layout Paragraph*
Android app
\end_layout

\begin_layout Standard
The android app will be built using Kotlin, the new official language for
 building apps for the platform.
\end_layout

\begin_layout Paragraph*
iOS App
\end_layout

\begin_layout Standard
The iOS app will be built using Swift.
\end_layout

\begin_layout Paragraph*
Desktop web and native apps
\end_layout

\begin_layout Standard
The desktop web application will be built using the React framework.
 The desktop application will be built using Electron reusing most of the
 code of the web application, adding code to support native functionality
 such as OS integrated notifications.
\end_layout

\begin_layout Subsubsection
Web tier
\end_layout

\begin_layout Standard
One or more Nginx load balancers will distribute requests to other Nginx
 web servers which will serve the web application resources (HTML, CSS,
 JS, ...) and proxy incoming requests to the Python HTTP APIs.
\end_layout

\begin_layout Subsubsection
Application logic tier
\begin_inset CommandInset label
LatexCommand label
name "subsec:Application-logic-tier"

\end_inset


\end_layout

\begin_layout Itemize
User management service
\end_layout

\begin_deeper
\begin_layout Itemize
Authentication
\end_layout

\begin_layout Itemize
Sign up
\end_layout

\begin_layout Itemize
Password reset
\end_layout

\begin_layout Itemize
User information and preferences
\end_layout

\end_deeper
\begin_layout Itemize
Calendar management service
\end_layout

\begin_deeper
\begin_layout Itemize
Manages calendars and events
\end_layout

\end_deeper
\begin_layout Itemize
Travel planing service
\end_layout

\begin_deeper
\begin_layout Itemize
Provides travel suggestions
\end_layout

\begin_layout Itemize
Uses external API to get itineraries, maps, and travel means information
\end_layout

\end_deeper
\begin_layout Itemize
Event notifications service
\end_layout

\begin_deeper
\begin_layout Itemize
Generates notifications related to calendar events
\end_layout

\end_deeper
\begin_layout Itemize
Travel notifications service
\end_layout

\begin_deeper
\begin_layout Itemize
Generates travel-related notifications (e.g.
 if a travel needs to be rescheduled due to a strike)
\end_layout

\begin_layout Itemize
Uses external APIs to get travel means informations and weather
\end_layout

\end_deeper
\begin_layout Itemize
Notification delivery service
\end_layout

\begin_deeper
\begin_layout Itemize
Pushes notifications to users via email or push
\end_layout

\end_deeper
\begin_layout Itemize
Taxi reservation service
\end_layout

\begin_layout Itemize
Mobility sharing reservation service
\end_layout

\begin_deeper
\begin_layout Itemize
Searches for a vehicle to reserve before the start of a trip
\end_layout

\end_deeper
\begin_layout Itemize
Ticket shop service
\end_layout

\begin_deeper
\begin_layout Itemize
Links our service, public transport ticketing service and payment processor
\end_layout

\end_deeper
\begin_layout Subsubsection
Database tier
\end_layout

\begin_layout Standard
We will use MariaDB as DBMS for storing data.
\end_layout

\begin_layout Subsubsection
External APIs and data sources
\end_layout

\begin_layout Standard
fetches external data such as maps, weather, public transport informations,
 ticket information, taxi information, sharing mobility
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Da scrivere e sono messe nel posto giusto queste img?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The interactions between the main components are shown in this two figure:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename res/img/HighLevelComponentView.png
	lyxscale 50
	width 100text%
	height 100theight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
High Level Component View
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename res/img/ComponentView.png
	lyxscale 50
	width 100text%
	height 100theight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Component View
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
In this section we show how we plan to map the software components of our
 system on physical machines, planning for future scalability.
\end_layout

\begin_layout Subsubsection
Web tier
\end_layout

\begin_layout Standard
In a first moment we will deploy a single Nginx web server and there will
 be no load balancer.
 One or more machines will be provisioned as load balancers when more capacity
 will be needed.
 Requests to the load balancers will be balanced via DNS, and the load balancers
 themselves will distribute load uniformly to the web and application servers
 in a way that a single user requests will always reach the same backend
 server (so to avoid the problem of distributing server-local storage).
\end_layout

\begin_layout Subsubsection
Application logic tier
\end_layout

\begin_layout Standard
The various Python services implementing Travlendar+ APIs will initially
 run on the same machine hosting the Nginx web server, under the gunicorn
 application server.
 When the need will arise the most demanding services will be moved to one
 or more dedicated machines and load will be split between them, allowing
 for a gradual transition to a distributed system.
\end_layout

\begin_layout Subsubsection
Database tier
\end_layout

\begin_layout Standard
Initially we will deploy a single instance of the MariaDB RDBMS on a single
 machine.
 We expect to reach the machine limits in read performance as our user base
 grows, while we don't expect write performance to pose a problem in the
 near future.
 We will monitor load and deploy more machines as slave/read-only servers,
 and distribute reads between them.
 We anticipate the possibility of sharding the database on user id when
 the write performance will become insufficient, as different users interact
 sparely and mostly in read only way on other user's data.
 
\end_layout

\begin_layout Subsubsection
Other scalability notes
\end_layout

\begin_layout Standard
Initially there will be no dedicated firewall applicance.
 Depending on need (e.g.
 if the service will be subject of DDOS attacks) a dedicated appliance could
 be installed in front of the load balancers, or a service such as CloudFlare
 could be used to mitigate attacks.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename res/img/initial_hardware_deployment.png
	lyxscale 30
	width 60text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Initial Deployment View
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename res/img/future_hardware_deployment.png
	lyxscale 30
	width 100text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Future Deployment View
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Standard
In this section are explained through sequence diagrams some of the most
 important interactions between components and actors of the system.
 For semplicity, here we assume that the actor is using the web application.
\end_layout

\begin_layout Subsubsection*
Signup Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_signup.plantuml
	width 100text%
	height 100cm
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Signup Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Billing Information After Signup Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_billInformationSignup.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Billing Information After Signup Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Login Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_login.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Login Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Edit Personal Information Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_editBillInfo.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Edit Personal Information Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Add/Edit Travel Preferences Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_editTravelPreferences.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Add/Edit Travel Preferences Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Edit Billing Information Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_editBillInfo.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Edit Billing Information Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Buy Ticket/Pass Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_buyTicketPass.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Buy Ticket/Pass Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
New Standard Event Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_newEvent1.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
New Standard Event Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
New Event With Sharing Services Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_newEvent2.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
New Event With Sharing Services Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
New Event With Flexible Option Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_newEvent3.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
New Event With Flexible Option Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
New Shared Event With Invitation Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_newSharedEvent.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
New Shared Event With Invitation Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Edit Event Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_editEvent.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Edit Event Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Delete Event Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_deleteEvent.plantuml
	width 100text%
	height 100theight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Delete Event Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection*
Contact Customer Service Sequence Diagram
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename diagrams/sequence_diagram/sequence-diagram_customerService.plantuml
	width 100text%
	height 100theight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Contact Customer Service Sequence Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Component interfaces
\end_layout

\begin_layout Standard
In this section we describe the the APIs provided by each component of the
 system.
 A mid-high level view of the main functionalities is presented, and other
 trivial API endpoints may and will be added during the implementation phase.
 Endpoints that require authentication are clearly marked at the beginning
 of the description.
\end_layout

\begin_layout Subsubsection*

\series bold
User managment service
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Vertical cell spacing
\end_layout

\begin_layout Plain Layout

{
\backslash
renewcommand{
\backslash
arraystretch}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none" width="100col%">
\begin_inset Text

\begin_layout Plain Layout
Sign up and account managment
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
initiate_signup(user_data)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Creates a new 
\family typewriter
unconfirmed user
\family default
 in the system with the information provided during the registration phase
 and sends the verification email.verifies correctness and completeness of
 the datacreates user instance in the databasegenerates a secure random
 verification codeassociates the code with the user in the databaseuses
 the Notifications delivery service to send a verification email with the
 code to the user
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
complete_signup(verification_code)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ends the user signup process by verifying the code sent by email to newly
 registered users.
 If the code is correct the corresponding user is marked as verified and
 will be able to use the service.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
change_password(current_password, new_password)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
\end_layout

\begin_layout Enumerate
Verifies that current_password matches the current user password.
 If it does not match, go to 5.
\end_layout

\begin_layout Enumerate
Verifies that new_password is different than the current one and satisfies
 password strength requirements
\end_layout

\begin_layout Enumerate
Stores the new password in the database
\end_layout

\begin_layout Enumerate
Uses the Notifications delivery service to inform the user that his password
 has changed.
 End.
\end_layout

\begin_layout Enumerate
Uses the Notifications delivery service to inform the user that an attempt
 to change his password is failed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
initiate_password_recovery(username)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initiates password recovery procedure for a user.
\end_layout

\begin_layout Enumerate
Generates a secure random verification code
\end_layout

\begin_layout Enumerate
Associates the code with the username in the database
\end_layout

\begin_layout Enumerate
Uses the Notifications delivery service to send a verification email to
 the user containing a link with the verification code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
recover_password(verification_code, new_password)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Allows to recover a user password.
\end_layout

\begin_layout Enumerate
Checks the verification_code against the database and gets which user it
 belongs to
\end_layout

\begin_layout Enumerate
Asserts that the new password satisfies password strength requirements
\end_layout

\begin_layout Enumerate
Changes the user password
\end_layout

\begin_layout Enumerate
Uses the Notifications delivery service to inform the user that his password
 has changed.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Login
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
login(user, password)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Verifies the supplied user credentials and, if correct, returns an authenticatio
n token which can be used (via an HTTP header or cookie) to access other
 restricted APIs.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Account managment
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_account_information()
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Returns user account informations and preferences.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
update_account_information(user_data)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Updates the account information.
\end_layout

\begin_layout Enumerate
Verifies that the user can update the data he has provided
\end_layout

\begin_layout Enumerate
Updates the user data
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Calendar managment service
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Vertical cell spacing
\end_layout

\begin_layout Plain Layout

{
\backslash
renewcommand{
\backslash
arraystretch}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create_calendar(calendar_name)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Creates a new calendar for the authenticated user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_calendars()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Returns the calendars accessible by the authenticated user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delete_calendar(calendar_id)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Deletes a calendar belonging to the authenticated user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
create_event(event_details, calendar_id)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Adds an event to a calendar.
\end_layout

\begin_layout Enumerate
Verifies correctness and completness of the event details (e.g.
 the event must have a name, coherent start/end dates, ...)
\end_layout

\begin_layout Enumerate
Verifies that the calendar belongs to the authenticated user
\end_layout

\begin_layout Enumerate
Adds the event to the calendar, saving it in the database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_events(query)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Returns the events matching the given query.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
delete_event(event_id)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Deletes an event that belongs to the authenticated user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
update_event(event_id, event_details)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Updates an event belonging to the authenticated user.
\end_layout

\begin_layout Enumerate
Verifies correctness of the updated event details
\end_layout

\begin_layout Enumerate
Verifies that the event belongs to the authenticated user
\end_layout

\begin_layout Enumerate
Updates the event details
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Da aggiungere altri endpoint relativi agli eventi
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Travel planning service
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Vertical cell spacing
\end_layout

\begin_layout Plain Layout

{
\backslash
renewcommand{
\backslash
arraystretch}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_travel_suggestions(start_location, end_location, travel_start_time[,
 travel_preferences])
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns travel suggestions, combining results from external services.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schedule_shared_reservation(location, datetime, event_id, vehicle_type)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Schedules a reservation of a shared vehicle associated to an event
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
schedule_taxi_reservation(location, datetime, event_id)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Schedules the reservation of a taxi associated to an event
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Notification delivery service
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Vertical cell spacing
\end_layout

\begin_layout Plain Layout

{
\backslash
renewcommand{
\backslash
arraystretch}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_push(username, notification)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal API callable only by other services.
 Sends a push notification to the user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_email(username, notification)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal API callable only by other services.
 Sends an email notification to the user.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_notification(username, notification)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal API callable only by other services.
 Send a notification to the user, accounting for their preference when it
 comes to sending an email or a push or both.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Ticket shop service
\end_layout

\begin_layout Standard
Credit card information is processed through Stripe and associated with
 our users.
 Once a user has provided credit card information our service can bill them
 directly when they buy a ticket.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Vertical cell spacing
\end_layout

\begin_layout Plain Layout

{
\backslash
renewcommand{
\backslash
arraystretch}{2}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="35text%">
<column alignment="left" valignment="middle" width="65text%">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Endpoint
\end_layout

\end_inset
</cell>
<cell multicolumn="1" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_lines()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns a list of the public transport lines.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_tickets(line)
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns a list of tickets eligible for a given transportation line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_passes(line)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns a list of passes eligible for a given transportation line
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
purchase(ticket)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Requires authentication.
 Orders the purchase of a ticket for the authenticated user.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Event notifications service
\end_layout

\begin_layout Standard
This service does not expose any endpoints.
\end_layout

\begin_layout Subsubsection*
Travel notifications service
\end_layout

\begin_layout Standard
This service does not expose any endpoints.
\end_layout

\begin_layout Subsubsection*
Taxi reservations service
\end_layout

\begin_layout Standard
This service does not expose any endpoints.
\end_layout

\begin_layout Subsubsection*
Mobility sharing reservation service
\change_inserted -1730310665 1511364966

\end_layout

\begin_layout Standard
This service does not expose any endpoints.
\end_layout

\begin_layout Standard

\change_deleted -1730310665 1511364958
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cose non nostre da qui in avanti
\end_layout

\end_inset


\change_inserted -1730310665 1511365420

\series bold

\begin_inset Newline newline
\end_inset


\change_unchanged
Other Specifications
\end_layout

\begin_layout Itemize
The front-ends of the system (the mobile app and the web application) communicat
e with the Application Server using the back-end interface implemented as
 a RESTful interface over the HTTPS protocol.
\end_layout

\begin_layout Itemize
The users’ browsers will communicate with the web server via HTTPS requests.
 Any unencrypted request will be denied.
\end_layout

\begin_layout Itemize
The RESTful interface is implemented in the Application server using JAX-RS
 and uses XML as the data representation language.
\end_layout

\begin_layout Itemize
The Application Server communicates with the DBMS via the Java Persistence
 API over standard network protocols.
\end_layout

\begin_layout Itemize
The Application Server is configurable by means of a XML configuration file,
 that will contain any other setting useful in the implementation phase.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection

\change_inserted -1730310665 1511365046
External components
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511365695
We suppose to have a commercial agreement with some service.
 In this section it is documented what functions (give from external services)
 our system uses.
 
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511366060
Google Maps 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\change_inserted -1730310665 1511366074
è copiato ma non sapevo fare di meglio
\end_layout

\end_inset


\change_unchanged

\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511366117
The system uses Google Maps to calculate the distance between two location
 and the distance of route with toll, to visualize the map, to schedule
 a trip.
 The reasons of this choice are the following:
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511365681
manually developing maps for each city is not a viable solution due to the
 tremendous effort of coding and data collection required
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511365681
Google Maps is a well-established, tested and reliable software component
 already used by millions of people around the world
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511365681
Google Maps offers APIs, enabling programmatic access to its features
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511366090
the users feel comfortable with a software component they know and use everyday
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511366103
Citymapper
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511366706
The system uses Citymapper to schedule a trip that includes public transportatio
n means or walk track.
 The reasons of this choice are the followning:
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511366527
Citymapper works very well in large urban city (like Milano)
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511366586
Citymapper authomatically offers a service to calculate an extimation of
 the calory effort spent by users that reach the destination by walk
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511366715
Citymapper is a reliable service for public transportation
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511366736
AccuWeather
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511366984
The system uses AccuWeather to recive real time weather forcast.
 The reason of this choice is the following:
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367035
the cost of a self internal implementation of a service like this would
 be to much expensive and implement a reliable service of weather forcast
 is difficoult
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511367054
Trenord
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511367181
The system uses Trenord to know the cost of tickets and passes for railway
 transportation.
 The reason of this choice is the following:
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367185
our system will initially work in Milano and Trenord is the greatest company
 in this area
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511367198
Stripe
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511367429
The system uses Stripe as payment processor.
 The reason of this choice is the following
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367272
it offers grat users experience and it easy to integrate
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367348
Stripe is secure
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511367401
Enjoy
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511367997
The system uses Enjoy to search and find near shared cars.
 The reason of this choice are the following
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367618
Enjoy is widely used in Milano and in every part of the city it is expected
 to be possible to find a car
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367739
users well know how Enjoy works and feel comfortable
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511367747
Uber
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511367872
The system uses Uber to reserve car with driver.
 The reason of this choice is the following
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367942
\begin_inset Note Note
status open

\begin_layout Plain Layout

\change_inserted -1730310665 1511367888
manca della fuffa qui
\change_unchanged

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511367950
Mobike
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511367969
The system uses Mobike to reserve shared bike.
 The reason of this choice is the following
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511367990
Enjoy is widely used in Milano and in every part of the city it is expected
 to be possible to find a bike
\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511367915
Taxi
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511367934
The system uses Taxi to reserve taxi.
 The reason of this choice is the following
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511368028
\begin_inset Note Note
status open

\begin_layout Plain Layout

\change_inserted -1730310665 1511367910
manca della fuffa qui
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\change_inserted -1730310665 1511368036
Amazon SNS
\end_layout

\begin_layout Standard

\change_inserted -1730310665 1511368195
The system uses Amazon SNS as notification deliver.
 The reason of this choice are the following
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511368145
reinplement a notification delivers expansive, booth in term of cost and
 work needed
\end_layout

\begin_layout Itemize

\change_inserted -1730310665 1511368189
Amazon SNS offers a stable services uses by thousands of users
\end_layout

\begin_layout Subsection
Architectural styles and patterns
\end_layout

\begin_layout Subsubsection
Architectural patterns
\end_layout

\begin_layout Standard
The architecture of the system has been previously described at higher level.
\end_layout

\begin_layout Standard
As we said, we adopted a 
\series bold
multi-tier architecture
\series default
 in which every tier is hosted on a different machine: the 
\shape italic
Client
\shape default
 tier is on the pc or smartphone the user access the system from, the 
\shape italic
Web
\shape default
 tier is hosted on a separate server used only for this purpose, while another
 server hosts the 
\shape italic
Business
\shape default
 tier.
 Finally a last server contains the 
\shape italic
Data
\shape default
 tier.
\end_layout

\begin_layout Standard
This division between all levels has been made in order to allow update
 and maintenance on a particular tier without affecting the others, and
 to prevent the whole system to interrupt in case of fault of a component.
 We also adopted the 
\shape italic
thin client
\shape default
 paradigm to the interaction between user’s machine and the system: in this
 way all the application logic is on the application server, which has sufficien
t computing power and is able to manage concurrency issue efficiently.
\end_layout

\begin_layout Subsubsection
Design Patterns
\end_layout

\begin_layout Standard
The Design pattern used for this system is the 
\series bold
Model-View-Controller
\series default
 (MVC).
\end_layout

\begin_layout Standard
This choice has been made mainly for the flexibility that this pattern provides:
 the 
\shape italic
model
\shape default
, the 
\shape italic
view
\shape default
 and the 
\shape italic
controller
\shape default
 are separated into different components that can be modified with a minimum
 impact with respect to the others, helping to achieve a better scalability
 and offering the possibility to add new functionalities to the system or
 to apply changes to the code.
 In more detail:
\end_layout

\begin_layout Itemize
The 
\series bold
Model
\series default
 contains the representation of data and the application logic, so all the
 functions that manipulates data.
\end_layout

\begin_layout Itemize
The 
\series bold
View
\series default
 makes the model suitable for the user interaction, providing a GUI: every
 user will access the system and all its functionalities through this component.
 Furthermore, it provides the possibility to have different representations
 (or views) for the same data, depending on the user’s preference or on
 the user’s permissions.
\end_layout

\begin_layout Itemize
The 
\series bold
Controller
\series default
, finally, is responsible for the communication between the View and the
 Model: in particular it responds to user’s actions and invokes changes
 on the model.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Other design decisions
\end_layout

\begin_layout Subsubsection
Storage of passwords
\end_layout

\begin_layout Standard
Users’ password will not be stored in plain-text, but they will be hashed
 and salted with cryptographic hash functions.
 This provides a last line of defense in case of data theft.
\end_layout

\begin_layout Subsubsection
Google Maps
\end_layout

\begin_layout Standard
The system uses an external service, Google Maps, to offload all the geolocaliza
tion, distance calculation and map visualization processes.
 The reasons of this choice are the following:
\end_layout

\begin_layout Itemize
manually developing maps for each city is not a viable solution due to the
 tremendous effort of coding and data collection required;
\end_layout

\begin_layout Itemize
Google Maps is a well-established, tested and reliable software component
 already used by millions of people around the world;
\end_layout

\begin_layout Itemize
Google Maps offers APIs, enabling programmatic access to its features;
\end_layout

\begin_layout Itemize
Google Maps can be used both on the server side (calculation, shortest paths,
 traffic, incident reporting) and on the client side (map visualization);
\end_layout

\begin_layout Itemize
the users feel comfortable with a software component they know and use everyday.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
In this section we will detail pseudocode for some of the crucial functionality
 of our system.
\end_layout

\begin_layout Subsection
Automatic reservation algorithm
\end_layout

\begin_layout Standard
The 
\family typewriter
try_auto_reservation
\family default
 function is called by the mobility sharing reservation service' scheduler
 when travel of an event is approaching and the user has requested automatic
 reservation of a shared vehicle.
\end_layout

\begin_layout Standard
It searches an available shared vehicle that matches the user's preferences
 within a specific time-dependent radius centered around the current position
 of the user.
\end_layout

\begin_layout Standard
If no vehicles are found and travel should start in less than 20 minutes
 the user is notified, and the search continues.
\end_layout

\begin_layout Standard
The user can halt the search and manually reschedule the trip or allow the
 search to continue.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

def try_auto_reservation(event, user):
\end_layout

\begin_layout Plain Layout

	# Time before the travel will start in minutes
\end_layout

\begin_layout Plain Layout

	travel_starts_in = (event.travelStartTime - time.time()) / (1000 * 60)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if travel_starts_in > 30:
\end_layout

\begin_layout Plain Layout

		throw Exception("Automatic reservation procedure called too early")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	# Returns the radius of search in meters depending on time
\end_layout

\begin_layout Plain Layout

	radius = get_search_radius(travel_starts_in)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	# Tries to find a suitable vehicle in the specified radius
\end_layout

\begin_layout Plain Layout

	success = reserve_vehicle_if_available_in_radius(event, user, radius)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if success:
\end_layout

\begin_layout Plain Layout

		return True
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if travel_starts_in <= 20:
\end_layout

\begin_layout Plain Layout

		notification_service.send("No suitable shared vehicle found! We will continue
 searching, but you could be required to reschedule your trip.")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	# Reschedule another try in 5 minutes
\end_layout

\begin_layout Plain Layout

	shared_vehicle_reservation_service.schedule_auto_reservation_at(time.time()
 + 5 * 60 * 1000, event, user)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	return False
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def get_search_radius(travel_starts_in):
\end_layout

\begin_layout Plain Layout

	if travel_starts_in <= 20:
\end_layout

\begin_layout Plain Layout

		return 2000
\end_layout

\begin_layout Plain Layout

	elif travel_starts_in <= 25:
\end_layout

\begin_layout Plain Layout

		return 1500
\end_layout

\begin_layout Plain Layout

	else:
\end_layout

\begin_layout Plain Layout

		return 1000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def reserve_vehicle_if_available_in_radius(event, user, radius):
\end_layout

\begin_layout Plain Layout

	allowed_vehicles = event.shared_vehicle_reservation.vehicle_kinds
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	for sharing_mobility_service in sharing_mobility_services.filter_on(allowed_vehi
cles):
\end_layout

\begin_layout Plain Layout

		success = sharing_mobility_service.try_reserving_in_radius(user.current_position
, radius)
\end_layout

\begin_layout Plain Layout

		if success:
\end_layout

\begin_layout Plain Layout

			return True
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	return False
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Flexible event verification algorithm
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=Python]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*   
\end_layout

\begin_layout Plain Layout

This function is called when a new fixed event is added to the calendar.
 It checks if the flexible events that were scheduled during the 
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def check_flexible_events_satisfiable (event):
\end_layout

\begin_layout Plain Layout

	# This function return a value: true, it means that the event does not
 is created; false, it means that there isn't a free slot of time for the
 flexible event.
\end_layout

\begin_layout Plain Layout

	// If the function returns true the user is notified about the successful
 creation of the event.
\end_layout

\begin_layout Plain Layout

	// If the function return a false value the user is asked if he wants to
 reschedule the flexible event or one of the event near it.
\end_layout

\begin_layout Plain Layout

	// The function getNextEvent(time) return the first scheduled event after
 the time specified.
\end_layout

\begin_layout Plain Layout

	for(start = e.ConstraintTimeStart; start < e.ConstraintTimeEnd; start = getNextEv
ent(start).getStartingTime()){
\end_layout

\begin_layout Plain Layout

		if(getNextEvent(start).getStartingTime() - start >= e.getDuration()){
\end_layout

\begin_layout Plain Layout

			e.setStartTime(start);
\end_layout

\begin_layout Plain Layout

			e.setEndTime(start+e.getDuration());
\end_layout

\begin_layout Plain Layout

			return true;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Event reachable verification algorithm
\end_layout

\begin_layout Standard
In this section we will analyze the structure of the code that will verify
 if the event that the user is creating is reachable in time.
\end_layout

\begin_layout Subparagraph*
isReachableEvent (Event)
\end_layout

\begin_layout Standard
\SpecialChar ligaturebreak

\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*   
\end_layout

\begin_layout Plain Layout

This function checks if the scheduled event after the event that user is
 creating is reachable in time.
 It returns to the caller true if it is possible, false otherwise.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

boolean isReachableEvent (Event e){
\end_layout

\begin_layout Plain Layout

	if(e.nextEvent().getStartTime()-e.getEndTime() > e.nextEvent().getPosition().getTrave
lTime(e.getPosition()))
\end_layout

\begin_layout Plain Layout

		return true;
\end_layout

\begin_layout Plain Layout

	return false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
CO2 emissions calculation algorithm
\end_layout

\begin_layout Standard
In this section we will analyze the structure of the code that will calculate
 the CO2 emissions of a route.
\end_layout

\begin_layout Subparagraph*
calculateCO2 (StartPosition, EndPosition, TransportMean)
\end_layout

\begin_layout Standard
\SpecialChar ligaturebreak

\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*   
\end_layout

\begin_layout Plain Layout

This function calculates the CO2 emissions of a route with a specific transport
 mean.
 It uses external APIs (GoogleMaps) for caluclate the distance between two
 points.
\end_layout

\begin_layout Plain Layout

The calculus of the CO2 emission is based on a estimation (it is assumed
 that if the distance is less than 10km the route will be urban, up to 20km
 extraurban, otherwise in the route there is an highway and the production
 of CO2 is proportional to the number of km).
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float calculateCO2 (StartPosition, EndPosition, TransportMean){
\end_layout

\begin_layout Plain Layout

	// Thanks to an external service (Google Maps) it receives the distance
 in KM between the starting point and the event location.
\end_layout

\begin_layout Plain Layout

	distance = GoogleMaps.travelDistance(StartPosition, EndPosition, TransportMean);
\end_layout

\begin_layout Plain Layout

	// This list contains the coefficients of each transport mean used to calculate
 the CO2 emissions.
\end_layout

\begin_layout Plain Layout

	List co2coefficients = loadCO2CoefficientsFor(TransportMean);
\end_layout

\begin_layout Plain Layout

	float coefficient;
\end_layout

\begin_layout Plain Layout

	if(distance < 10)
\end_layout

\begin_layout Plain Layout

		coefficient = co2coefficients[0];
\end_layout

\begin_layout Plain Layout

	elseif (distance < 20)
\end_layout

\begin_layout Plain Layout

		coefficient = co2coefficients[1];
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		coefficient = co2coefficient[2];
\end_layout

\begin_layout Plain Layout

	return distance * coefficient;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Cost calculation algorithm
\end_layout

\begin_layout Standard
In this section we will analyze the structure of the code that will calculate
 the cost of a route.
\end_layout

\begin_layout Subparagraph*
calculateCost (StartPosition, EndPosition, TransportMean)
\end_layout

\begin_layout Standard
\SpecialChar ligaturebreak

\begin_inset space ~
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*   
\end_layout

\begin_layout Plain Layout

This function calculates the cost of a route with a specific transport mean.
 It uses external APIs (GoogleMaps for car, motorbike,...
 and Citymapper for public transportation means).
\end_layout

\begin_layout Plain Layout

In case of personal motor transport means it is assumed that the total cost
 is the sum of a toll (if the route include a toll road) and the cost of
 the gasoline used by the car, motobike,..
\end_layout

\begin_layout Plain Layout

In case of public transport mean Citymapper gives the cost of the travel.
\end_layout

\begin_layout Plain Layout

In case of personal free means (bike) or walk the cost will be 0.
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

float calculateCost (StartPosition, EndPosition, TransportMean){
\end_layout

\begin_layout Plain Layout

	if(TransportMean == PersonalMotorTransportMean){
\end_layout

\begin_layout Plain Layout

		// Thanks to an external service (Google Maps) it receives the distance
 in KM between the starting point and the event location.
\end_layout

\begin_layout Plain Layout

		distance = GoogleMaps.travelDistance(StartPosition, EndPosition, TransportMean)
;
\end_layout

\begin_layout Plain Layout

		// Thanks to an external service (Google Maps) it receives the distance
 in KM of the part of the route that provides for the payment of a toll.
\end_layout

\begin_layout Plain Layout

		distanceToll = GoogleMaps.travelDistanceToll(StartPosition, EndPosition,
 TransportMean);
\end_layout

\begin_layout Plain Layout

		float costCoefficient = loadCostCoefficientFor(TransportMean);
\end_layout

\begin_layout Plain Layout

		//Personal motor transport mean coefficient.
\end_layout

\begin_layout Plain Layout

		if(distanceToll != 0)
\end_layout

\begin_layout Plain Layout

			return (distance * costCoefficient + calculateToll(distanceToll));
\end_layout

\begin_layout Plain Layout

		return distance * costCoefficient;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(TransportMean == PublicTransportMean){
\end_layout

\begin_layout Plain Layout

		// Thanks to an external service (Citymapper) it receives the cost of
 the route.
\end_layout

\begin_layout Plain Layout

		meanRouteCost = Citymapper.routeCost(StartPosition, EndPosition, TransportMean)
;
\end_layout

\begin_layout Plain Layout

		return meanRouteCost;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	if(TransportMean == PersonalFreeTransportMean || Walk){
\end_layout

\begin_layout Plain Layout

		// The cost of a free transport mean (like bike or walk) is zero.
\end_layout

\begin_layout Plain Layout

		return 0;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Section
User Interface Design
\end_layout

\begin_layout Standard
We included our mockups for the user interface in the Requirement Analisys
 and Specifications Document.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Standard
In the RASD document we have deﬁned all the system's requirements: in this
 section we explaine how they map into the design elements deﬁned in this
 document.
 
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="34" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Component (DD)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Requirements (RASD)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
User management service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.1 User account management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Calendar management service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.2 Calendar and event management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Travel planning service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.3 Travel planning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.1 User account management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Notification delivery service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.2 Calendar and event management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.3 Travel planning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ticket shop service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.3 Travel planning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event notifications service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.2 Calendar and events management
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Travel notifications service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.3 Travel planning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taxi reservations service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.3 Travel planning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mobility sharing reservation service
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.1.3 Travel planning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Implementation, integration and and test plan
\end_layout

\begin_layout Section
Appendix
\end_layout

\begin_layout Subsection
Tools used
\end_layout

\begin_layout Standard
We used the following tools to produce this document:
\end_layout

\begin_layout Itemize

\series bold
LaTex
\series default
 as typesetting system to write this document
\end_layout

\begin_layout Itemize

\series bold
LyX
\series default
 as editor
\end_layout

\begin_layout Itemize

\series bold
Visio Professional
\series default
 and 
\series bold
draw.io
\series default
 to draw all the diagrams
\end_layout

\begin_layout Section
Effort spent
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename res/img/hours.png
	width 50text%
	height 50theight%
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
References
\end_layout

\end_body
\end_document
