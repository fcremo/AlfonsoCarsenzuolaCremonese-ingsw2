@startuml

skinparam classAttributeIconSize 0

Calendar "1"--"*" Event
Calendar "*"--"1" User
Event "*"--"1" User
Event "*"--"2" Position
User "1"--"1" TransportPreferences
User "1"--"*" PublicTransportPass
User "1"--"*" PublicTransportTicket
Event <|-- RecurringEvent
Event <|-- FlexibleEvent
Event <|-- TravelPlannedEvent
TravelPlannedEvent "*"--"*" RoutePlanner
RoutePlanner "*"--"*" PublicTransportPass
RoutePlanner "*"--"*" PublicTransportTicket
RoutePlanner "*"--"*" PublicTransportSegment
RoutePlanner "*"--"*" SharingMobilityServicePosition
RoutePlanner "*"--"1" TransportPreferences
RoutePlanner "*"--"*" Position
SharingMobilityServicePosition <|-- CarSharingPosition
SharingMobilityServicePosition <|-- BikeSharingPosition
PublicTransportSegment <|-- BusSegment
PublicTransportSegment <|-- MetroSegment
PublicTransportSegment <|-- RoadCarSegment
PublicTransportSegment <|-- TrainSegment

class User {
    - Email
    - Password
    - Name
    - Surname
}

class TransportPreferences {
    - HasOwnCar
    - HasDrivingLicence
    - CanUseBike
    - CanUseTrain
    - CanUseMetro
    - CanUseBus
    - CanUseRoadCar
    - MaxWalkingDistance
    - MaxPublicTransportHour
}

class Calendar {
    - Name
}

class Position {
    - Latitude
    - Longitude
}

class Event {
    - Name
    - Date
    - StartTime
    - EndTime
    - Place
    - Description
    - Participant
    - Notification
    - Attachment
}

class RecurringEvent {
    - Frequency
    - Days
    - RecurringStart
    - RecurringEnd
}

class FlexibleEvent {
    - ConstraintTimeStart
    - ConstraintTimeEnd
    - Duration
}

class TravelPlannedEvent {
    - BestRoute
}

class SharingMobilityServicePosition
class CarSharingPosition
class BikeSharingPosition

class PublicTransportSegment {
    - StartPosition
    - EndPosition
    - Time
    - Duration
    - CO2Emission
}

class BusSegment
class MetroSegment
class RoadCarSegment
class TrainSegment

class PublicTransportTicket {
    - ValidForMeans
    - ValidForTime
    - Cost
}

class PublicTransportPass {
    - ValidForMeans
    - ValidFromDate
    - ValidToDate
    - Cost
}

class RoutePlanner {
    + findBestRoutes(startPosition: Position, endPosition: Position): List<Route>
    + findBestRoutes(comingFrom: Event, goingTo: Event): List<Route>
}

@enduml
